# Base stage for shared dependencies
FROM node:20-bookworm-slim as base

RUN corepack enable

WORKDIR /app

# Define ARGs for sensitive information
ARG SESSION_SECRET
ARG POSTGRES_PASSWORD
ARG DB_SECRET

# Use ARGs to set ENVs for other variables that can derive from sensitive ones
ENV DISABLE_SIGNUP=true \
    REDWOOD_WEB_URL=http://localhost:8910 \
    REDWOOD_API_URL=http://localhost:8911 \
    ENVIRONMENT=development \
    NODE_ENV=development \
    COMPOSE_PROJECT_NAME=appratings-com \
    POSTGRES_DB=appratings_com_local \
    POSTGRES_DB_TEST=appratings_com_test \
    POSTGRES_USER=postgres \
    DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB} \
    TEST_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB_TEST} \
    AUTH0_DOMAIN=dev-yckirnadid5fdbrg.us.auth0.com \
    AUTH0_CLIENT_ID=BmFLgyxWH4Xy3MTdMnxI8DIDrIEljVAE \
    AUTH0_REDIRECT_URI=http://localhost:8910 \
    AUTH0_AUDIENCE=https://dev.api.appratings.com

COPY package.json yarn.lock redwood.toml graphql.config.js .
COPY api/package.json api/
ENV HUSKY=0
RUN apt-get update && \
    apt-get install -y openssl libssl-dev && \
    yarn install --immutable --immutable-cache --parallel && \
    yarn cache clean && \
    rm -rf /var/lib/apt/lists/*

# Build stage for API
FROM base as builder
COPY api/ /app/api/
COPY scripts/ /app/scripts/
RUN yarn global add @redwoodjs/cli
RUN yarn rw build api
RUN yarn rw prisma generate

# Final stage for API server
FROM base AS api
WORKDIR /app
RUN apt-get update && apt-get install -y libssl-dev
COPY --from=builder /app .
COPY entrypoint.local.sh /app/
RUN chmod +x /app/entrypoint.local.sh
EXPOSE 8911
CMD ["/app/entrypoint.local.sh"]
