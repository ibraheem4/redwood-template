name: CI/CD Pipeline

on:
  push:
    branches:
      - auth-auth0
  pull_request:
    branches:
      - auth-auth0

jobs:
  build_test_lint_publish:
    runs-on: ubuntu-latest
    env:
      REDWOOD_WEB_URL: ${{ secrets.REDWOOD_WEB_URL }}
      DISABLE_SIGNUP: ${{ secrets.DISABLE_SIGNUP }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      REDWOOD_API_URL: ${{ secrets.REDWOOD_API_URL }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      POSTGRES_DB_DEV: ${{ secrets.POSTGRES_DB_DEV }}
      POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB_DEV }}
      TEST_DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@test_db:5432/${{ secrets.POSTGRES_DB_TEST }}
      COMPOSE_PROJECT_NAME: stencil-auth0

    steps:
      - name: Capture start time
        run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Make
        run: sudo apt-get update -y && sudo apt-get install -y make

      - name: Build and start containers
        run: make up-ci

      - name: Install dependencies
        run: make install-deps-ci

      - name: Build RedwoodJS project
        run: make build-ci

      - name: Lint RedwoodJS project
        run: make lint-ci

      - name: Run web and api tests
        run: make test-ci

      - name: Cache Docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Build Web Docker Image
        if: github.ref == 'refs/heads/auth-auth0'
        run: make build-web
        env:
          DOCKERFILE_PATH: Dockerfile.web

      - name: Build API Docker Image
        if: github.ref == 'refs/heads/auth-auth0'
        run: make build-api
        env:
          DOCKERFILE_PATH: Dockerfile.api

      - name: Tag Web Docker Image
        if: github.ref == 'refs/heads/auth-auth0'
        run: make tag-web

      - name: Tag API Docker Image
        if: github.ref == 'refs/heads/auth-auth0'
        run: make tag-api

      - name: Publish Web Docker Image to Docker Hub
        if: github.ref == 'refs/heads/auth-auth0'
        run: make publish-web
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: web

      - name: Publish API Docker Image to Docker Hub
        if: github.ref == 'refs/heads/auth-auth0'
        run: make publish-api
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: api

      - name: Login to Amazon ECR Public
        if: github.ref == 'refs/heads/auth-auth0'
        run: echo ${{ secrets.AWS_ACCESS_KEY_ID }} | aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Docker Images for ECS
        if: github.ref == 'refs/heads/auth-auth0'
        run: make build-ecs

      - name: Tag Docker Images for ECS
        if: github.ref == 'refs/heads/auth-auth0'
        run: make tag-ecs

      - name: Publish Docker Images to Amazon ECR Public
        if: github.ref == 'refs/heads/auth-auth0'
        run: make publish-ecs

      - name: Publish Build Information
        if: github.ref == 'refs/heads/auth-auth0'
        run: |
          web_image_size=$(docker images $(DOCKER_TAG_WEB) --format "{{.Size}}")
          api_image_size=$(docker images $(DOCKER_TAG_API) --format "{{.Size}}")
          echo "::warning file=build.log,line=1,col=5::Web Image Size: $web_image_size | API Image Size: $api_image_size"

      - name: Record build time
        if: github.ref == 'refs/heads/auth-auth0'
        run: echo "::warning file=build.log,line=2,col=5::Build took $(($(date +%s) - $BUILD_START_TIME)) seconds."

      - name: Cleanup
        run: make clean-ci

  publish_to_ecr:
    needs: build_test_lint_publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/auth-auth0' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build Docker Images for ECS
        run: make build-ecs

      - name: Tag Docker Images for ECS
        run: make tag-ecs

      - name: Publish Docker Images to Amazon ECR
        run: make publish-ecs

  deploy_to_aws:
    needs: publish_to_ecr
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/auth-auth0' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS Copilot CLI
        run: |
          curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux && \
          chmod +x copilot && \
          sudo mv copilot /usr/local/bin/copilot

      - name: Deploy Web Service to AWS using Copilot
        if: github.ref == 'refs/heads/auth-auth0' && github.event_name == 'push'
        run: |
          copilot svc deploy --name web --env ${{ secrets.ENVIRONMENT_NAME }} --image ${{ secrets.ECR_REGISTRY }}/web:$IMAGE_TAG
        env:
          DISABLE_SIGNUP: ${{ secrets.DISABLE_SIGNUP }}

      - name: Deploy API Service to AWS using Copilot
        if: github.ref == 'refs/heads/auth-auth0' && github.event_name == 'push'
        run: |
          copilot svc deploy --name api --env ${{ secrets.ENVIRONMENT_NAME }} --image ${{ secrets.ECR_REGISTRY }}/api:$IMAGE_TAG
        env:
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
