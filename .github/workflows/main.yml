name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      - name: Install dependencies
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn install

      - name: Build RedwoodJS project
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw build

      - name: Save Docker images as artifact
        run: |
          docker save -o images.tar $(docker images -q)

      - name: Upload Docker images as artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-images
          path: images.tar

  lint:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download Docker images from artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-images

      - name: Lint RedwoodJS project
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw lint

  test:
    needs: lint
    runs-on: ubuntu-latest
    env:
      REDWOOD_API_URL: http://api:8911
      POSTGRES_DB_DEV: ${{ secrets.POSTGRES_DB_DEV }}
      POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB_DEV }}
      TEST_DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@test_db:5432/${{ secrets.POSTGRES_DB_TEST }}

    steps:
      - uses: actions/checkout@v3

      - name: Download Docker images
        uses: actions/download-artifact@v2
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i docker-images

      - name: Run Web tests
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw test web --no-watch

  publish:
    needs: [build, lint, test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download Docker images
        uses: actions/download-artifact@v2
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i docker-images

      - name: Tag Docker Images
        run: |
          docker tag docker-ibraheem4-nginx-web-dev:latest ibraheem4/docker-ibraheem4-nginx-web-dev:latest
          docker tag docker-ibraheem4-redwood-api-dev:latest ibraheem4/docker-ibraheem4-redwood-api-dev:latest

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Images to Docker Hub
        run: |
          docker push ibraheem4/docker-ibraheem4-nginx-web-dev:latest
          docker push ibraheem4/docker-ibraheem4-redwood-api-dev:latest

      - name: List Docker Images
        run: docker images

      - name: Publish Build Information
        run: |
          web_image_size=$(docker images ibraheem4/docker-ibraheem4-nginx-web-dev:latest --format "{{.Size}}")
          api_image_size=$(docker images ibraheem4/docker-ibraheem4-redwood-api-dev:latest --format "{{.Size}}")
          echo "::warning file=build.log,line=1,col=5::Web Image Size: $web_image_size | API Image Size: $api_image_size"
