name: CI/CD Pipeline

on:
  push:
    branches:
      - auth-auth0
  pull_request:
    branches:
      - auth-auth0

jobs:
  build_test_lint_publish:
    runs-on: ubuntu-latest
    env:
      REDWOOD_WEB_URL: ${{ secrets.REDWOOD_WEB_URL }}
      DISABLE_SIGNUP: ${{ secrets.DISABLE_SIGNUP }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      REDWOOD_API_URL: ${{ secrets.REDWOOD_API_URL }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      POSTGRES_DB_DEV: ${{ secrets.POSTGRES_DB_DEV }}
      POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB_DEV }}
      TEST_DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@test_db:5432/${{ secrets.POSTGRES_DB_TEST }}
      COMPOSE_PROJECT_NAME: stencil-auth0

    steps:
      - name: Capture start time
        run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Make
        run: sudo apt-get update -y && sudo apt-get install -y make

      - name: Build and start containers
        run: make up-ci

      - name: Install dependencies for API, Web
        run: make install-deps-ci

      - name: Build RedwoodJS project
        run: make build-ci

      - name: Lint RedwoodJS project
        run: make lint-ci

      - name: Run tests in parallel
        run: make test-ci

      - name: Cache Docker images.
        uses: ScribeMD/docker-cache@0.3.6
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('compose.yml') }}

      - name: Build Docker Images
        if: github.ref == 'refs/heads/auth-auth0'
        run: make build-docker

      - name: Tag Docker Images
        if: github.ref == 'refs/heads/auth-auth0'
        run: make tag-docker

      - name: Publish Docker Images to ECR
        if: github.ref == 'refs/heads/auth-auth0'
        run: make publish-docker

      - name: Record build time
        if: github.ref == 'refs/heads/auth-auth0'
        run: echo "::warning file=build.log,line=2,col=5::Build took $(($(date +%s) - $BUILD_START_TIME)) seconds."

      - name: Cleanup
        run: make clean-ci

  deploy_to_aws:
    needs: build_test_lint_publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/auth-auth0' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup AWS Copilot
        uses: softprops/setup-aws-copilot@v1

      - name: Deploy Web Service to AWS using Copilot
        if: github.ref == 'refs/heads/auth-auth0'
        run: copilot svc deploy --name web --env ${{ secrets.ENVIRONMENT_NAME }} --image ${{ secrets.ECR_REGISTRY }}/web:${{ github.sha }}
        env:
          DISABLE_SIGNUP: ${{ secrets.DISABLE_SIGNUP }}

      - name: Deploy API Service to AWS using Copilot
        if: github.ref == 'refs/heads/auth-auth0'
        run: copilot svc deploy --name api --env ${{ secrets.ENVIRONMENT_NAME }} --image ${{ secrets.ECR_REGISTRY }}/api:${{ github.sha }}
        env:
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
