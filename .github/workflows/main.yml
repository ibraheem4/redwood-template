name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      - name: Install dependencies
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn install

      - name: Build RedwoodJS project
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw build

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      - name: Lint RedwoodJS project
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw lint

  test:
    runs-on: ubuntu-latest
    env:
      REDWOOD_API_URL: http://api:8911
      POSTGRES_DB_DEV: ${{ secrets.POSTGRES_DB_DEV }}
      POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB_DEV }}
      TEST_DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@test_db:5432/${{ secrets.POSTGRES_DB_TEST }}

    steps:
      - uses: actions/checkout@v3

      - name: Build and start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      - name: Run migrations (if applicable)
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw prisma migrate deploy

      - name: Run API tests
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw test api --no-watch

      - name: Run Web tests
        run: docker-compose -f docker-compose.ci.yml exec -T api yarn rw test web --no-watch

  publish:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Build and Start Docker Containers
        run: |
          start_time=$(date +%s)
          docker-compose -f docker-compose.ci.yml build
          end_time=$(date +%s)
          build_runtime=$((end_time - start_time))
          echo "Build Runtime: $build_runtime seconds" >> $GITHUB_WORKSPACE/build.log

      - name: Tag Docker Images
        run: |
          docker tag docker-ibraheem4-nginx-web-dev:latest ibraheem4/docker-ibraheem4-nginx-web-dev:latest
          docker tag docker-ibraheem4-redwood-api-dev:latest ibraheem4/docker-ibraheem4-redwood-api-dev:latest

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Images to Docker Hub
        run: |
          start_time=$(date +%s)
          docker push ibraheem4/docker-ibraheem4-nginx-web-dev:latest
          docker push ibraheem4/docker-ibraheem4-redwood-api-dev:latest
          end_time=$(date +%s)
          publish_runtime=$((end_time - start_time))
          echo "::warning file=publish.log,line=1,col=5::Publish Runtime: $publish_runtime seconds"

      - name: Publish Build Information
        run: |
          cat $GITHUB_WORKSPACE/build.log
          build_runtime=$(cat $GITHUB_WORKSPACE/build.log | grep 'Build Runtime' | awk '{print $3}')
          web_image_size=$(docker images ibraheem4/docker-ibraheem4-nginx-web-dev:latest --format "{{.Size}}")
          api_image_size=$(docker images ibraheem4/docker-ibraheem4-redwood-api-dev:latest --format "{{.Size}}")
          echo "::warning file=build.log,line=1,col=5::Build Runtime: $build_runtime seconds | Web Image Size: $web_image_size | API Image Size: $api_image_size"
