name: CI/CD Pipeline

on:
  push:
    branches:
      - auth-auth0
  pull_request:
    branches:
      - auth-auth0

jobs:
  build_test_lint_publish:
    runs-on: ubuntu-latest
    env:
      REDWOOD_WEB_URL: ${{ secrets.REDWOOD_WEB_URL }}
      DISABLE_SIGNUP: ${{ secrets.DISABLE_SIGNUP }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
      REDWOOD_API_URL: ${{ secrets.REDWOOD_API_URL }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      POSTGRES_DB_DEV: ${{ secrets.POSTGRES_DB_DEV }}
      POSTGRES_DB_TEST: ${{ secrets.POSTGRES_DB_TEST }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB_DEV }}
      TEST_DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@test_db:5432/${{ secrets.POSTGRES_DB_TEST }}
      COMPOSE_PROJECT_NAME: stencil-auth0

    steps:
      - name: Capture start time
        run: echo "BUILD_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Make
        run: sudo apt-get update -y && sudo apt-get install -y make

      - name: Build and start containers
        run: make up-ci

      - name: Install dependencies
        run: make install-deps-ci

      - name: Build RedwoodJS project
        run: make build-ci

      - name: Lint RedwoodJS project
        run: make lint-ci

      - name: Run web and api tests
        run: make test-ci

      - name: Cache Docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Build Docker Images
        run: make build-docker

      - name: Tag Docker Images
        run: make tag-docker

      - name: Publish Docker Images to Docker Hub
        if: github.ref == 'refs/heads/auth-auth0'
        run: make publish-docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR for Web
        if: github.ref == 'refs/heads/auth-auth0'
        run: |
          docker tag ibraheem4/stencil-auth0-web-nginx-local:latest ${{ steps.login-ecr.outputs.registry }}/stencil-auth0-web:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/stencil-auth0-web:latest

      - name: Tag and push image to Amazon ECR for API
        if: github.ref == 'refs/heads/auth-auth0'
        run: |
          docker tag ibraheem4/stencil-auth0-api-local:latest ${{ steps.login-ecr.outputs.registry }}/stencil-auth0-api:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/stencil-auth0-api:latest

      - name: Publish Build Information
        run: |
          web_image_size=$(docker images ibraheem4/stencil-auth0-web-nginx-local:latest --format "{{.Size}}")
          api_image_size=$(docker images ibraheem4/stencil-auth0-api-local:latest --format "{{.Size}}")
          echo "::warning file=build.log,line=1,col=5::Web Image Size: $web_image_size | API Image Size: $api_image_size"

      - name: Record build time
        run: echo "::warning file=build.log,line=2,col=5::Build took $(($(date +%s) - $BUILD_START_TIME)) seconds."

      - name: Cleanup
        run: make clean-ci

  deploy_to_aws:
    needs: build_test_lint_publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/auth-auth0' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS using CloudFormation
        run: |
          aws cloudformation deploy \
            --template-file cloudformation.json \
            --stack-name my-stack \
            --parameter-overrides \
              WebAppImageUri=${{ steps.login-ecr.outputs.registry }}/stencil-auth0-web:latest \
              ApiAppImageUri=${{ steps.login-ecr.outputs.registry }}/stencil-auth0-api:latest \
            --tags Project=stencil-auth0
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
